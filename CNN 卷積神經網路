#MNIST手寫數字識別


import os
import torch
import torch.nn as nn
import torch.utils.data as Data
import torchvision
import matplotlib.pyplot as plt


EPOCH = 1
BATCH_SIZE = 50
LR = 0.001
DOWNLOAD_MNIST = False

if not (os.path.exists("./mnist/")) or not os.listdir("./mnist/"):
    DOWNLOAD_MNIST = True

train_data = torchvision.datasets.MNIST(
    root="./mnist/",
    train=True,
    transform=torchvision.transforms.ToTensor(),                     # [0, 255] to [0, 1]
    download=DOWNLOAD_MNIST,
)


# print(train_data.train_data.size())  # (60000, 28, 28)
# print(train_data.train_labels.size())  # (60000)
plt.imshow(train_data.train_data[0].numpy(), cmap="gray")            # 轉灰階
# plt.show()

train_loader = Data.DataLoader(dataset=train_data, batch_size=BATCH_SIZE, shuffle=True)

test_data = torchvision.datasets.MNIST(root="./mnist/", train=False)
test_x = torch.unsqueeze(test_data.test_data, dim=1).type(torch.FloatTensor)[
         :2000] / 255.                            # shape from (2000, 28, 28) to (2000, 1, 28, 28), value in range(0,1)
test_y = test_data.test_labels[:2000]


class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Sequential(                                         # 順序容器, input shape (1, 28, 28)
            nn.Conv2d(
                in_channels=1,                                              # input height
                out_channels=16,                                            # n_filters
                kernel_size=5,                                              # filter size
                stride=1,                                                   # filter step
                padding=2,                                                  # padding=(kernel_size-1)/2 if stride=1
            ),  # output shape (16, 28, 28)
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2),                      # choose max value in 2x2 area, output shape (16, 14, 14)
        )
        self.conv2 = nn.Sequential(                           # input shape (16, 14, 14)
            nn.Conv2d(16, 32, 5, 1, 2),                       # output shape (32, 14, 14)
            nn.ReLU(),
            nn.MaxPool2d(2),                                  # output shape (32, 7, 7)
        )
        self.out = nn.Linear(32 * 7 * 7, 10)                  # fully connected layer, output 10 classes

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = x.view(x.size(0), -1)                             # flatten the output of conv2 to (batch_size, 32 * 7 * 7)
        output = self.out(x)
        return output, x


cnn = CNN()
# print(cnn)

optimizer = torch.optim.Adam(cnn.parameters(), lr=LR)
loss_func = nn.CrossEntropyLoss()

plt.ion()

for epoch in range(EPOCH):
    for step, (b_x, b_y) in enumerate(train_loader):
        output = cnn(b_x)[0]
        loss = loss_func(output, b_y)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if step % 30 == 0:
            test_output, last_layer = cnn(test_x)
            pred_y = torch.max(test_output, 1)[1].data.numpy()
            accuracy = float((pred_y == test_y.data.numpy()).astype(int).sum()) / float(test_y.size(0))
            print("Epoch:", epoch, "| train loss: %.4f" % loss.data.numpy(), "| test accuracy: %.2f" % accuracy)

plt.ioff()

# print 10 predictions from test data
test_output, _ = cnn(test_x[:20])
pred_y = torch.max(test_output, 1)[1].data.numpy()
print(pred_y, "prediction number")
print(test_y[:20].numpy(), "real number")
